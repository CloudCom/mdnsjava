<project name="mdnsjava" default="all" basedir=".">
    <property name="build_dir" value="${basedir}/classes"/>
    <property name="src_dir" value="${basedir}/src/main/java"/>
    <property name="lib_dir" value="${basedir}/lib"/>
    <property name="doc_dir" value="${basedir}/doc"/>
    <property name="dist_dir" value="${basedir}"/>
    <property name="tests_dir" value="${basedir}/tests"/>
    <property name="reports_dir" value="${basedir}/reports"/>
    <property name="version" value="2.1.6"/>
    <property name="jarname" value="mdnsjava-${version}.jar"/>
    <property name="zipname" value="mdnsjava-${version}.zip"/>
    <property name="targzname" value="mdnsjava-${version}.tar.gz"/>

    <property name="j2se.javadoc"
      value="http://docs.oracle.com/javase/1.5.0/docs/api/"/>

    <target name="all" description="Compile and Jar" depends="bundle">
    </target>

    <target name="compile" description="Compile everything">
	<mkdir dir="${build_dir}"/>
	<javac destdir="${build_dir}" debug="true" target="1.5" source="1.5" includeantruntime="false">
	    <src path="${src_dir}"/>
		<classpath>
			<fileset dir="${lib_dir}">
				<include name="*.jar"/>
			</fileset>
		</classpath>
	    <exclude name="tests/**"/>
	</javac>
    </target>

    <target name="jar" description="Makes mdnsjava.jar" depends="compile">
	<jar jarfile="${dist_dir}/${jarname}"
		basedir="${build_dir}" includes="**/*.class **/*.properties">
	    <exclude name="org/xbill/DNS/tests/*.class"/>
	    <exclude name="tests/**"/>
	    <manifest>
		<attribute name="Implementation-Title" value="mdnsjava"/>
		<attribute name="Implementation-Version" value="${version}"/>
	    </manifest>
	</jar>
    </target>
	
	<target name="bundle" description="Creates an OSGi bundle" depends="jar">
		<get src="http://www.aqute.biz/repo/biz/aQute/bnd/0.0.384/bnd-0.0.384.jar"
			dest="${build_dir}/bnd.jar"/>
		<taskdef resource="aQute/bnd/ant/taskdef.properties"
			classpath="${build_dir}/bnd.jar"/> 
		<echo file="${dist_dir}/mdnsjava-${version}.bnd" append="false">
			Bundle-Version: ${version}
			Bundle-Name: mdnsjava is an implementation of mDNS and DNS-SD in Java
			Bundle-SymbolicName: org.xbill.mdns
			Export-Package: org.xbill.mDNS;version=${version}
			Bundle-Vendor: posick.net
			Bundle-RequiredExecutionEnvironment: J2SE-1.6
			Import-Package: !org.xbill.mDNS*,*
		</echo>
		<bndwrap
			definitions="${dist_dir}"
			jars="${dist_dir}/${jarname}"
			output="${dist_dir}/org.xbill.mdns_${version}.jar"/>
		<delete file="${dist_dir}/mdnsjava-${version}.bnd"/>
	</target>

    <target name="clean" description="Remove old class files">
	<delete>
	    <fileset dir="${build_dir}" includes="**/*.class"/>
	    <fileset dir="${build_dir}" includes="*.bnd *.jar *.zip *.tar.gz jcoverage.ser"/>
	</delete>
    </target>

    <target name="docs" description="Makes Javadoc documentation">
	<javadoc destdir="${doc_dir}"
		 sourcepath="${src_dir}"
		 packagenames="org.xbill.mDNS,org.xbill.mDNS.utils"
		 windowtitle="mdnsjava documentation">

	    <link href="${j2se.javadoc}"/>
	</javadoc>
    </target>

    <target name="docsclean" description="Remove old documentation">
	<delete dir="${doc_dir}"/>
    </target>

    <target name="reportsclean" description="Remove old reports">
	<delete dir="${reports_dir}"/>
    </target>

    <property name="source_excludes"
	      value="classes,**/*.class,${jarname},${zipname},${targzname}" />

    <target name="sourcedist" description="Builds source distributions"
	    depends="jar,docs">
	<zip destfile="${dist_dir}/${zipname}">
	    <zipfileset dir="${basedir}" prefix="mdnsjava-${version}"
			excludes="${source_excludes}" />
	</zip>
	<tar destfile="${dist_dir}/${targzname}" compression="gzip">
	    <tarfileset dir="${basedir}" prefix="mdnsjava-${version}"
			excludes="${source_excludes}" />
	</tar>
    </target>

    <target name="compile_tests" depends="compile">
	<javac destdir="${tests_dir}" debug="true" target="1.5" source="1.5">
	    <src path="${tests_dir}"/>
	    <exclude name="org/xbill/DNS/DNSSECWithLunaProviderTest**"/>
	</javac>
    </target>

    <target name="run_tests">
      <path id="tests_classpath">
	<path location="${basedir}"/>
	<path location="${tests_dir}"/>
      </path>
      <antcall target="_run_tests">
	<param name="classpath_name" value="tests_classpath"/>
      </antcall>
    </target>

    <target name="_run_tests" depends="compile_tests">
      <junit fork="yes" forkmode="perTest" dir="${basedir}"
             haltonerror="on" haltonfailure="on">
	<classpath>
          <path location="${basedir}"/>
          <path location="${tests_dir}"/>
	</classpath>
	<formatter type="plain" usefile="no"/>
	<test name="${testcase}" if="testcase"/>
	<batchtest unless="testcase">
	  <fileset dir="${tests_dir}">
	  <include name="**/*Test.class"/>
	</fileset>
	</batchtest>
      </junit>
    </target>
    
    <target name="coverage_report" depends="clean,compile_tests" if="jcoverage_dir">
      <taskdef resource="tasks.properties">
	<classpath>
		<path location="${jcoverage_dir}/jcoverage.jar"/>
		<path location="${jcoverage_dir}/lib/log4j/1.2.8/*.jar"/>
		<path location="${jcoverage_dir}/log4j.jar"/>
		<path location="${jcoverage_dir}/bcel.jar"/>
		<path location="${jcoverage_dir}/oro.jar"/>
		<path location="${jcoverage_dir}/gnu.getopt.jar"/>
	</classpath>
      </taskdef>
      <instrument todir="${basedir}/iclasses">
	<fileset dir="${basedir}">
	  <include name="**/*.class"/>
	  <exclude name="iclasses/**"/>
	  <exclude name="tests/**"/>
	</fileset>
	<ignore regex="org.xbill.DNS.Tokenizer$*"/>
      </instrument>
      <path id="itests_classpath">
	<path location="${basedir}/iclasses"/>
	<path location="${tests_dir}"/>
	<path location="${jcoverage_dir}/jcoverage.jar"/>
	<path location="${jcoverage_dir}/lib/log4j/1.2.8/*.jar"/>
	<path location="${jcoverage_dir}/log4j.jar"/>
	<path location="${jcoverage_dir}/bcel.jar"/>
	<path location="${jcoverage_dir}/oro.jar"/>
	<path location="${jcoverage_dir}/gnu.getopt.jar"/>
      </path>
      <antcall target="_run_tests">
	<param name="classpath_name" value="itests_classpath"/>
      </antcall>
      <report srcdir="${basedir}" destdir="${reports_dir}/coverage"/>
      <delete dir="${basedir}/iclasses"/>
    </target>

</project>
